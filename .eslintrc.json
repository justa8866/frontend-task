{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "settings": {
    "react": {
      "createClass": "createReactClass",
      "pragma": "React",
      "fragment": "Fragment",
      "version": "detect",
      "flowVersion": "0.53"
    },
    "propWrapperFunctions": [
      "forbidExtraProps",
      { "property": "freeze", "object": "Object" },
      { "property": "myFavoriteWrapper" },
      { "property": "forbidExtraProps", "exact": true }
    ],
    "componentWrapperFunctions": [
      "observer",
      { "property": "styled" },
      { "property": "observer", "object": "Mobx" },
      { "property": "observer", "object": "<pragma>" }
    ],
    "formComponents": ["CustomForm", { "name": "Form", "formAttribute": "endpoint" }],
    "linkComponents": ["Hyperlink", { "name": "Link", "linkAttribute": "to" }]
  },
  "overrides": [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["react", "react-hooks", "@typescript-eslint", "prettier"],
  "rules": {
    "linebreak-style": ["error", "unix"],
    "quotes": ["error", "single"],
    "semi": ["error", "always"],
    "no-var": "error",
    "no-unused-vars": "error",
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "no-use-before-define": "off",
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
    "@typescript-eslint/explicit-module-boundary-types": [
      "error",
      {
        "allowArgumentsExplicitlyTypedAsAny": false,
        "allowDirectConstAssertionInArrowFunctions": true,
        "allowedNames": [],
        "allowHigherOrderFunctions": true,
        "allowTypedFunctionExpressions": true
      }
    ],
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": {
            "message": "Use {} instead of Object type"
          },
          "any": {
            "message": "Any type is forbidden"
          },
          "unknown": {
            "message": "Unknown type is forbidden"
          },
          "object": {
            "message": "Object type is forbidden - use type {} instead"
          }
        }
      }
    ]
  }
}
